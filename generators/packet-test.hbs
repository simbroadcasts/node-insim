{{#ifNotEquals variant "info"}}import { testSendablePacket } from '../../utils';
import type { IS_{{ name }}_Data } from '..';
{{/ifNotEquals}}import { IS_{{ name }}, PacketType } from '..';
import { BasePacket } from '../BasePacket';

{{#ifNotEquals variant "info"}}
const data: IS_{{ name }}_Data = {
  // TODO
};

const expectedBuffer = Buffer.from([
  {{ size }} / BasePacket.SIZE_MULTIPLIER, // Size
  {{ type }}, // Type
  0, // ReqI
  // TODO
]);
{{/ifNotEquals}}

describe('IS_{{ name }}', () => {
{{#ifNotEquals variant "info"}}
  testSendablePacket(IS_{{ name }}, {{ size }}, PacketType.ISP_{{ name }}, data, expectedBuffer);
{{/ifNotEquals}}
{{#ifNotEquals variant "instruction"}}

  it('should unpack data from a buffer', () => {
    const buffer = Buffer.from([
      {{ size }} / BasePacket.SIZE_MULTIPLIER, // Size
      {{ type }}, // Type
      0, // ReqI
      // TODO
    ]);
    const packet = new IS_{{ name }}().unpack(buffer);

    expect(packet.Size).toEqual({{ size }});
    expect(packet.Type).toEqual(PacketType.ISP_{{ name }});
    expect(packet.ReqI).toEqual(0);
  });
{{/ifNotEquals}}
});
