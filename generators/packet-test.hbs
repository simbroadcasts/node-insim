{{#ifEquals variant "instruction"}}
import { testInstructionPacket } from '../../utils/tests';
import type { IS_{{ name }}_Data } from '..';
{{/ifEquals}}
{{#ifEquals variant "info"}}
  import type { PacketTestData } from '../../utils/tests';
  import { testInfoPacket } from '../../utils/tests';
{{/ifEquals}}
{{#ifEquals variant "both ways"}}
  import type { PacketTestData } from '../../utils/tests';
  import { testInfoPacket, testInstructionPacket } from '../../utils/tests';
  import type { IS_{{ name }}_Data } from '..';
{{/ifEquals}}
import { IS_{{ name }}, PacketType } from '..';
import { Packet } from '../base';

const size = {{ size }};

{{#ifEquals variant "instruction"}}
const data: IS_{{ name }}_Data = {
  // TODO
};

const buffer = Buffer.from([
  size / Packet.SIZE_MULTIPLIER, // Size
  {{ type }}, // Type
  0, // ReqI
  // TODO
]);
{{/ifEquals}}
{{#ifEquals variant "info"}}
const data: PacketTestData<IS_{{ name }}> = {
  // TODO
};

const buffer = Buffer.from([
  size / Packet.SIZE_MULTIPLIER, // Size
  {{ type }}, // Type
  0, // ReqI
  // TODO
]);
{{/ifEquals}}
{{#ifEquals variant "both ways"}}
const instructionData: IS_{{ name }}_Data = {
  // TODO
};

const instructionBuffer = Buffer.from([
  size / Packet.SIZE_MULTIPLIER, // Size
  {{ type }}, // Type
  0, // ReqI
  // TODO
]);

const infoData: PacketTestData<IS_{{ name }}> = {
  ReqI: 1,
  // TODO
};

const infoBuffer = Buffer.from([
  size / Packet.SIZE_MULTIPLIER, // Size
  {{ type }}, // Type
  1, // ReqI
  // TODO
]);
{{/ifEquals}}


describe('IS_{{ name }}', () => {
{{#ifEquals variant "instruction"}}
  testInstructionPacket({
    packetClass: IS_{{ name }},
    type: PacketType.ISP_{{ name }},
    size,
    data,
    buffer,
  });
{{/ifEquals}}
{{#ifEquals variant "info"}}
  testInfoPacket({
    packetClass: IS_{{ name }},
    type: PacketType.ISP_{{ name }},
    size,
    data,
    buffer,
  });
{{/ifEquals}}
{{#ifEquals variant "both ways"}}
  testInstructionPacket({
    packetClass: IS_{{ name }},
    type: PacketType.ISP_{{ name }},
    size,
    data: instructionData,
    buffer: instructionBuffer,
  });
  testInfoPacket({
    packetClass: IS_{{ name }},
    type: PacketType.ISP_{{ name }},
    size,
    data: infoData,
    buffer: infoBuffer,
  });
{{/ifEquals}}
});
