{{#ifEquals variant "instruction"}}
import { testInstructionPacket } from '../tests';
import type { IS_{{ name }}_Data } from './IS_{{ name }}';
{{/ifEquals}}
{{#ifEquals variant "info"}}
import type { PacketTestData } from '../tests';
import { testInfoPacket } from '../tests';
{{/ifEquals}}
{{#ifEquals variant "both ways"}}
import type { PacketTestData } from '../tests';
import { testInfoPacket, testInstructionPacket } from '../tests';
import type { IS_{{ name }}_Data } from './IS_{{ name }}';
{{/ifEquals}}
import { IS_{{ name }} } from './IS_{{ name }}';
import { PacketType } from './enums';

const size = {{ size }};

{{#ifEquals variant "instruction"}}
const data: IS_{{ name }}_Data = {
  // TODO
};

const buffer = new Uint8Array([
  size / Packet.SIZE_MULTIPLIER, // Size
  {{ type }}, // Type
  0, // ReqI
  // TODO
]);
{{/ifEquals}}
{{#ifEquals variant "info"}}
const data: PacketTestData<IS_{{ name }}> = {
  // TODO
};

const buffer = new Uint8Array([
  size / new IS_{{ name }}().SIZE_MULTIPLIER, // Size
  {{ type }}, // Type
  0, // ReqI
  // TODO
]);
{{/ifEquals}}
{{#ifEquals variant "both ways"}}
const instructionData: IS_{{ name }}_Data = {
  // TODO
};

const instructionBuffer = new Uint8Array([
  size / new IS_{{ name }}().SIZE_MULTIPLIER, // Size
  {{ type }}, // Type
  0, // ReqI
  // TODO
]);

const infoData: PacketTestData<IS_{{ name }}> = {
  ReqI: 1,
  // TODO
};

const infoBuffer = new Uint8Array([
  size / new IS_{{ name }}().SIZE_MULTIPLIER, // Size
  {{ type }}, // Type
  1, // ReqI
  // TODO
]);
{{/ifEquals}}


describe('IS_{{ name }}', () => {
{{#ifEquals variant "instruction"}}
  testInstructionPacket({
    packetClass: IS_{{ name }},
    type: PacketType.ISP_{{ name }},
    size,
    data,
    buffer,
  });
{{/ifEquals}}
{{#ifEquals variant "info"}}
  testInfoPacket({
    packetClass: IS_{{ name }},
    type: PacketType.ISP_{{ name }},
    size,
    data,
    buffer,
  });
{{/ifEquals}}
{{#ifEquals variant "both ways"}}
  testInstructionPacket({
    packetClass: IS_{{ name }},
    type: PacketType.ISP_{{ name }},
    size,
    data: instructionData,
    buffer: instructionBuffer,
  });
  testInfoPacket({
    packetClass: IS_{{ name }},
    type: PacketType.ISP_{{ name }},
    size,
    data: infoData,
    buffer: infoBuffer,
  });
{{/ifEquals}}
});
